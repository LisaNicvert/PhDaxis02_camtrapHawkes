---
title: "Infer interactions with ppstat"
author: 
  name: "Lisa Nicvert"
  orcid: 0009-0006-5763-0865
date: today
format: 
  html:
    toc: true
    toc-depth: 3
embed-resources: true
editor: source
---

```{r}
#| code-fold: true
#| message: false
library(ppstat)
library(here)
library(lubridate)
library(dplyr)

library(patchwork)
library(ggtext)

library(camtrapHawkes)

source(here("R/functions_ppstat.R"))
```

## Parameters

```{r}
set.seed(42)

paramlist <- list(
  # === 
  # Models
  # === 
  ndays = 2, # support of interaction function
  phi = "log", # shape of excitation function
  lbd = 1, # lambda (not clear)
  Nbasis = 100, # number of spline basis -> controls "bins width" together with knots
  splines = "bSpline", # natural splines ("nSpline" custom function) or spline basis ("bSpline")
  ord = 3, # order of splines (degree = ord-1)
  ord.hour = 3,
  # Species
  custom_splines = FALSE, # do we want different splines for each spp (TRUE) or not (FALSE)?
  startknot.spp = -12/24, # first knot
  endknot.spp = 2 + 12/24, # last knot
  by.spp = 6/24, # knots spacing (in days)
  trunc.spp = FALSE, # truncate? (avoid edge effects)
  mintrunc.spp = 0,
  maxtrunc.spp = 2,
  # Hour
  startknot.hour = -pi/4,
  endknot.hour = 2*pi + pi/4,
  by.hour = (3/24)*2*pi)
```

## Read data

```{r}
dat <- read.csv(here("outputs/05_example_real_data/cleaned_data.csv"))

# Format datetimes
fmt <- "%Y-%m-%d %H:%M:%S"
dat$datetime <- as.POSIXct(dat$datetime, format = fmt)
dat$datetime <- force_tz(dat$datetime, tz = "Etc/GMT-2")

# Remove observation 37904 (one datetime without hour)
dat <- dat |> filter(!is.na(datetime))
```


## Write equation

```{r}
# --- Splines truncature (for species interactions)
if(paramlist$trunc.spp){
  trunc.spp <- paste(paramlist$mintrunc.spp, paramlist$maxtrunc.spp, sep = "-")
  trunc.formula <- paste0(", trunc = c(", 
                          paramlist$mintrunc.spp,", ", paramlist$maxtrunc.spp, ")")
} else{
  trunc.spp <- "no"
  trunc.formula <- ""
}

# --- Splines knots (for species interactions)
if(paramlist$custom_splines){
  custom.max <- 0
  knots.formula <- paste0("knots =  c(seq(", 
                          paramlist$startknot.spp, ", ", custom.max, ", by = 1)", ", ",
                          "seq(", custom.max+paramlist$by.spp, ", ",
                          paramlist$endknot.spp, ", by = ", paramlist$by.spp,"))")
}else{
  knots.formula <- paste0("knots = seq(", 
                          paramlist$startknot.spp, ", ",
                          paramlist$endknot.spp, 
                          ", by = ", paramlist$by.spp,")")
}

# --- Spline type (bSpline or nSpline)
if(paramlist$splines == "bSpline"){
  spline.type <- "bSpline"
  ord.arg <- paste0(", ord = ", paramlist$ord)
  ord.arg.hour <- paste0(", ord = ", paramlist$ord.hour)
  boundary.knots.spp <- ""
  boundary.knots.hour <- ""
}else if (paramlist$splines == "nSpline"){
  spline.type <- "nSpline"
  ord.arg <- ""
  boundary.knots.spp <- paste0(", boundary = c(", 0, ", ", paramlist$ndays, ")")
  boundary.knots.hour <- paste0(", boundary = c(", 0, ", ", 2*pi, ")")
}

# Write formulas

# Species list
spp_formula <- unique(dat$snapshotName)

# Write species splines
spp.spline <- paste0(spline.type, "(x = ",
                     spp_formula, ", ",
                     knots.formula,
                     ord.arg,
                     boundary.knots.spp,
                     trunc.formula, ")")


# Write hour splines
hour.spline <- paste0(spline.type, "(x = hour, ",
                      "knots = seq(", paramlist$startknot.hour, ", ", 
                      paramlist$endknot.hour, ", by = ", 
                      paramlist$by.hour, "), ",
                      "sym = TRUE", 
                      boundary.knots.hour,
                      ord.arg.hour, ")")

# Final formulas
# Species response variable (write R vector with "c" in letters)
spp.resp <- paste(spp_formula, collapse = ", ")
spp.resp <- paste0("c(", spp.resp, ")")

# Write formulas
# -- Formula without hour covariate
(f.nocov <- paste0(spp.resp, " ~ ", paste(spp.spline, collapse = " + ")))

# -- Formula with hour covariates
(f.cov <- paste0(f.nocov,
                 " + ", hour.spline))
```

## Prepare inference

```{r}
# Create a "covariates" df
unitdata <- dat |> 
  select(locationID, cameraID) |> 
  unique() |> 
  rename("id" = "cameraID")

# Select useful columns and rename to accomodate ppstat
# framework
dat.ppstat <- dat |> 
      dplyr::select(-c(row_ID, locationID)) |> 
  rename("time" = "stamp") |> 
  rename("id" = "cameraID")

dat.ppstat$snapshotName <- factor(dat.ppstat$snapshotName)

# Create time of day (= hour) variable
dat.ppstat <- dat.ppstat |> 
  mutate(hour = 2*pi*(hour(datetime) + minute(datetime)/60 + second(datetime)/3600)/24) %>% 
  select(-datetime) |> 
  data.frame()

dat.ppstat$id <- factor(dat.ppstat$id)

# Create continuous process for hour covariate
hour <- dat.ppstat[, c("id", "hour", "time")]  
p.hour <- continuousProcess(hour, unitData = unitdata)

# Create marked point process with species occurrences
dat.ppstat <- dat.ppstat[, c("id", "snapshotName", "time")]

p <- markedPointProcess(pointData = dat.ppstat,
                        continuousData = p.hour,
                        markVar = "snapshotName")
```

## Inference

```{r}
if(paramlist$phi == "log"){
  selfStart <- TRUE
}else if(paramlist$phi == "identity"){
  selfStart <- FALSE
}
```


```{r}
m.cov <- pointProcessModel(as.formula(f.cov),
                           data = p,
                           family = ppstat::Hawkes(paramlist$phi),
                           N = paramlist$Nbasis,
                           lambda = paramlist$lbd,
                           support = paramlist$ndays,
                           selfStart = selfStart)
```


```{r}
m.nocov <- pointProcessModel(as.formula(f.nocov),
                             data = p,
                             family = ppstat::Hawkes(paramlist$phi),
                             N = paramlist$Nbasis,
                             lambda = paramlist$lbd,
                             support = paramlist$ndays,
                             selfStart = selfStart)
```

## Plot

```{r}
alpha <- 0.05
trans <- "exp"

yintercept <- ifelse(is.null(trans),
                     0, do.call(trans, list(0)))
```


### Model with no covariates

```{r}
# --- Silhouettes path
silhouettes_path <- here("data/species_silhouettes/")
silhouettes_labs <- c(impala = paste0("<img src='", silhouettes_path, 
                          "impala.png'", " height='20'/>", 
                          "<br>*impala*"),
                      kudu = paste0("<img src='", silhouettes_path, 
                                    "kudu.png'", " height='20'/>", 
                                    "<br>*kudu*"),
                      lion = paste0("<img src='", silhouettes_path, 
                                    "lion.png'", " height='20'/>", 
                                    "<br>*lion*"),
                      wildebeestblue = paste0("<img src='", silhouettes_path, 
                                              "wildebeest.png'", " height='20'/>",
                                              "<br>*wildebeest*"),
                      zebraburchells = paste0("<img src='", silhouettes_path, 
                                              "zebra.png'", " height='20'/>",
                                              "<br>*zebra*"))
```

```{r}
mod.df <- getPlotData(m.nocov, alpha = 0.05, trans = trans)
  
# Change variables names
mod.df <- mod.df |> 
  mutate(to = as.character(response)) |> 
  mutate(from = as.character(variable))
```

```{r, fig.width=8, fig.height=6}
mod.df2 <- mod.df |> 
  rename("time" = "x",
         "excitefunc" = "value")

plot_interactions(mod.df2, 
                  scale = "hours",
                  silhouettes = silhouettes_labs,
                  textsize = 12,
                  timestep = 12) +
  geom_hline(aes(yintercept = yintercept)) +
  geom_ribbon(aes(x = time, 
                  ymin = cf.lower, ymax=cf.upper), 
              fill = "cornflowerblue", alpha = 0.5)
```

```{r, fig.width=8, fig.height=8}
# ggplot(mod.df) + 
#   geom_ribbon(aes(x=x, ymin = cf.lower, ymax=cf.upper), 
#               fill = "cornflowerblue", alpha=0.5) +
#   geom_line(aes(x=x, y=value)) +
#   geom_hline(yintercept = yintercept, linetype = "dashed") +
#   facet_grid(rows = vars(to),
#              cols = vars(from),
#              switch = "y") + 
#   theme_linedraw() +
#   ylab("Occurrence rate of...") +
#   scale_x_continuous(paste0("Time (days)"),
#                      sec.axis = dup_axis(name = "Is impacted by..."), 
#                      limits = c(0,paramlist$ndays)) +
#   theme(axis.ticks.x.top = element_blank(),
#         axis.text.x.top = element_blank())
```

```{r get_ppstat_coeffs_nocov, echo = FALSE}
# Get species count
nspp <- length(m.nocov@models)

coef.nocov <- data.frame()
for(term in 1:nspp){
  coeffs <- get_ppstat_coeffs(model = m.nocov, 
                              term = term, 
                              alpha = alpha)
  
  coef.nocov <- bind_rows(coef.nocov, coeffs)
}

# If trans is not null, transform all coeffs
if(!is.null(trans)){
  coef.nocov[, c("coef", "lower", "upper")] <- do.call(trans, 
                                                        list(coef.nocov[,
                                                         c("coef", "lower", "upper")]))
}
```

```{r}
pattern = "(Intercept)"
# Get all coefficients modelling spontaneous rate rhythm
coef_spont <- coef.nocov[grep(pattern = pattern, 
                              x = coef.nocov$coef_id),]
```

```{r}
coef_spont2 <- coef_spont |> 
  rename("spont" = "coef",
         "to" = "species")

plot_background_rate(coef_spont2,
                     silhouettes = silhouettes_labs) +
  geom_errorbar(data = coef_spont2, 
                aes(ymin = lower, ymax = upper, x = to),
                width = 0.2, col = "darkgrey")
```

### Model with covariates

```{r}
mod.df.cov <- getPlotData(m.cov, alpha = 0.05, trans = trans)
  
# Change variables names
mod.df.cov <- mod.df.cov |> 
  mutate(to = as.character(response)) |> 
  mutate(from = as.character(variable))
```

```{r, fig.height=6, fig.width=8}
mod.df.cov2 <- mod.df.cov |> 
  rename("time" = "x",
         "excitefunc" = "value")

plot_interactions(mod.df.cov2, 
                  scale = "hours",
                  silhouettes = silhouettes_labs,
                  textsize = 12,
                  timestep = 12) +
  geom_hline(aes(yintercept = yintercept), col = "red") +
  geom_ribbon(aes(x = time, 
                  ymin = cf.lower, ymax=cf.upper), 
              fill = "cornflowerblue", alpha=0.5)
```

Compute the spline transformation of the circular time.

```{r hour_model, echo = FALSE}
# Construct a time vector for which to predict values
step.th <- 0.02
phour <- seq(0, 2*pi, by = step.th)

# We can convert this to the hours of the days from radians
hour <- phour/(2*pi)*24

# Construct spline basis functions matrix evaluated along time vector
if(paramlist$splines == "bSpline"){
  bhr <- bSpline(x = phour,
               knots = seq(paramlist$startknot.hour, 
                           paramlist$endknot.hour, 
                           by = paramlist$by.hour),
               ord = paramlist$ord.hour,
               sym = TRUE)
}else if(paramlist$splines == "nSpline"){
  bhr <- nSpline(x = phour,
               boundary = c(0, 2*pi))
}

# Normalising splines basis
cs <- sqrt(apply(bhr^2, 2, sum)*paramlist$by.hour)
bhr <- sweep(bhr, 2, cs, "/")
```


```{r get_ppstat_coeffs_cov, echo = FALSE}
# Get species count
nspp <- length(m.cov@models)

coef.cov <- data.frame()
for(term in 1:nspp){
  coeffs <- get_ppstat_coeffs(model = m.cov, 
                              term = term, 
                              alpha = alpha)
  
  coef.cov <- bind_rows(coef.cov, coeffs)
}

# If trans is not null, transform all coeffs
if(!is.null(trans)){
  coef.cov[, c("coef", "lower", "upper")] <- do.call(trans, 
                                                        list(coef.cov[,
                                                         c("coef", "lower", "upper")]))
}
```

```{r get_inferred_coeffs, echo = FALSE}
# Get pattern to match
if(paramlist$splines == "bSpline"){
  pattern <- 'bSpline\\(x = hour'
}else if(paramlist$splines == "nSpline"){
  pattern <- 'nSpline\\(x = hour'
}

# Get all coefficients modelling circadian rhythm
coef_hour <- coef.cov[grep(pattern = pattern, 
                           x = coef.cov$coef_id),]
coef_spont <- coef.cov[grep(pattern = "(Intercept)", 
                            x = coef.cov$coef_id),]

species_list <- unique(coef_hour$species)

# Initialise empty dataframe to fill with different spp
df_hour <- data.frame()

for(i in 1:length(species_list)){
  sp <- species_list[i]
  
  sub_coef <- coef_hour |> filter(species == sp)
  
  # Add the intercept first
  sub_coef <- rbind(coef_spont[coef_spont$species == sp, ],
                    sub_coef)
  
  vec1 <- rep(1, nrow(bhr))
  bhr1 <- cbind(vec1, bhr)
  estimate <- bhr1 %*% sub_coef$coef
  lower <- bhr1 %*% sub_coef$lower
  upper <- bhr1 %*% sub_coef$upper
  
  species <- rep(sp, length(estimate))
  
  # Get predicted values for species i
  df <- data.frame(species,
                   hour,
                   estimate,
                   lower,
                   upper)
  
  # Bind all species values
  df_hour <- bind_rows(df_hour, df)
}
```

```{r, include=FALSE}
coef_spont2 <- coef_spont |> 
  rename("spont" = "coef",
         "to" = "species")

plot_background_rate(coef_spont2,
                     silhouettes = silhouettes_labs) +
  geom_errorbar(data = coef_spont2, 
                aes(ymin = lower, ymax = upper, x = to),
                width = 0.2, col = "darkgrey")
```

```{r}
silhouettes_title <- c(impala = paste0("Impala <img src='", 
                                       silhouettes_path, 
                                       "impala.png'", " height='15'/>"),
                      kudu = paste0("Kudu <img src='", silhouettes_path, 
                                    "kudu.png'", " height='15'/>"),
                      lion = paste0("Lion <img src='", silhouettes_path, 
                                    "lion.png'", " height='15'/>"),
                      wildebeestblue = paste0("Wildebeest <img src='",
                                              silhouettes_path, 
                                              "wildebeest.png'",
                                              " height='15'/>"),
                      zebraburchells = paste0("Zebra <img src='", 
                                              silhouettes_path, 
                                              "zebra.png'", 
                                              " height='15'/>"))
```

```{r plot_circadian}
glist <- list()

for(s in species_list){
  res_filtered <- df_hour |> filter(species == s)
  
  g <- ggplot(res_filtered) + 
    geom_ribbon(aes(x = hour, ymin = lower, 
                    ymax = upper),
                fill = "cornflowerblue", 
                alpha = 0.5) +
    geom_line(aes(x = hour, y = estimate)) +
    scale_x_continuous(limits = c(0, 24),
                       breaks = seq(0, 24, by = 4)) +
    theme_linedraw() +
    xlab("Time of the day") +
    ggtitle(silhouettes_title[[s]]) 
  
  if (s == species_list[[1]]) { # Keep y axis for first plot
    g <- g + 
      ylab("Background rate") +
      theme(plot.title = element_markdown(color = "black", size = 15))
  } else {
    g <- g + 
      theme(axis.title.y = element_blank(), 
            axis.text.y = element_blank(),
            axis.ticks.y = element_blank(),
            plot.title = element_markdown(color = "black",
                                          size = 15))
  }

  glist <- c(glist, list(g))
}
```


```{r print_plot, fig.width=12, fig.height=3}
wrap_plots(glist, ncol = 5) & ylim(c(0, 1.2))
```
