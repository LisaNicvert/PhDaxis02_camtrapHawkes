---
title: "Infer interactions with ppstat"
author: 
  name: "Lisa Nicvert"
  orcid: 0009-0006-5763-0865
date: today
format: 
  html:
    toc: true
    toc-depth: 3
embed-resources: true
editor: source
---

```{r}
#| code-fold: true
#| message: false
library(ppstat)
library(here)
library(lubridate)
library(dplyr)

library(patchwork)
library(ggtext)

library(camtrapHawkes)

source(here("R/functions_ppstat.R"))
```

## Parameters

```{r}
set.seed(42)

# Misc
ndays <- 2 # support of interaction function
phi <- "log" # shape of excitation function
lbd <- 1 # lambda (not clear)

# Splines basis
Nbasis <- 100 # number of spline basis -> controls "bins width" together with knots

# Species
startknot_spp <- -12/24 # first knot
endknot_spp <- 2 + 12/24 # last knot
by_spp <- 6/24 # knots spacing (in days)
ord <- 3 # order of splines (degree <- ord-1)
trunc <- NULL # truncate? (avoid edge effects)

# Hour
startknot_hour <- -pi/4
endknot_hour <- 2*pi + pi/4
by_hour <- (3/24)*2*pi
ord_hour <- 3

# Plot parameters
alpha_conf <- 0.7

# --- Figures
figures_path <- here("figures/08_ppstat")
```

## Read data

```{r}
dat <- read.csv(here("outputs/05_example_real_data/cleaned_data.csv"))

# Format datetimes
fmt <- "%Y-%m-%d %H:%M:%S"
dat$datetime <- as.POSIXct(dat$datetime, format = fmt)
dat$datetime <- force_tz(dat$datetime, tz = "Etc/GMT-2")

# Remove observation 37904 (one datetime without hour)
dat <- dat |> filter(!is.na(datetime))
```


## Write equation


```{r}
# Write formulas

# Species list
spp <- unique(dat$snapshotName)

f_nocov <- write_formula(spp = spp, 
                         startknot_spp = startknot_spp, endknot_spp = endknot_spp, 
                         by_spp = by_spp,
                         ord = ord, 
                         trunc = trunc,
                         hourcov = FALSE)

f_cov <- write_formula(spp = spp, 
                       startknot_spp = startknot_spp, endknot_spp = endknot_spp, 
                       by_spp = by_spp,
                       ord = ord, 
                       trunc = trunc,
                       hourcov = TRUE,
                       ord_hour = ord_hour,
                       startknot_hour = startknot_hour, endknot_hour = endknot_hour, 
                       by_hour = by_hour)
```

## Prepare inference

```{r}
# Create a "covariates" df
unitdata <- dat |> 
  select(locationID, cameraID) |> 
  unique() |> 
  rename("id" = "cameraID")

# Select useful columns and rename to accomodate ppstat
# framework
dat_ppstat <- dat |> 
      dplyr::select(-c(row_ID, locationID)) |> 
  rename("time" = "stamp") |> 
  rename("id" = "cameraID")

dat_ppstat$snapshotName <- factor(dat_ppstat$snapshotName)

# Create time of day (= hour) variable
dat_ppstat <- dat_ppstat |> 
  mutate(hour = 2*pi*(hour(datetime) + minute(datetime)/60 + second(datetime)/3600)/24) %>% 
  select(-datetime) |> 
  data.frame()

dat_ppstat$id <- factor(dat_ppstat$id)

# Create continuous process for hour covariate
hour <- dat_ppstat[, c("id", "hour", "time")]  
p_hour <- continuousProcess(hour, unitData = unitdata)

# Create marked point process with species occurrences
dat_ppstat <- dat_ppstat[, c("id", "snapshotName", "time")]

p <- markedPointProcess(pointData = dat_ppstat,
                        continuousData = p_hour,
                        markVar = "snapshotName")
```

## Inference

```{r}
if(phi == "log"){
  selfStart <- TRUE
}else if(phi == "identity"){
  selfStart <- FALSE
}
```


```{r}
m_cov <- pointProcessModel(as.formula(f_cov),
                           data = p,
                           family = ppstat::Hawkes(phi),
                           N = Nbasis,
                           lambda = lbd,
                           support = ndays,
                           selfStart = selfStart)
```


```{r}
m_nocov <- pointProcessModel(as.formula(f_nocov),
                             data = p,
                             family = ppstat::Hawkes(phi),
                             N = Nbasis,
                             lambda = lbd,
                             support = ndays,
                             selfStart = selfStart)
```

## Plot

```{r}
alpha <- 0.05
trans <- "exp"

yintercept <- ifelse(is.null(trans),
                     0, do.call(trans, list(0)))
```


### Model with no covariates

```{r}
#| code-fold: true
# --- Silhouettes path
silhouettes_path <- here("data/species_silhouettes/")
silhouettes_labs <- c(impala = paste0("<img src='", silhouettes_path, 
                          "impala.png'", " height='20'/>", 
                          "<br>*impala*"),
                      kudu = paste0("<img src='", silhouettes_path, 
                                    "kudu.png'", " height='20'/>", 
                                    "<br>*kudu*"),
                      lion = paste0("<img src='", silhouettes_path, 
                                    "lion.png'", " height='20'/>", 
                                    "<br>*lion*"),
                      wildebeestblue = paste0("<img src='", silhouettes_path, 
                                              "wildebeest.png'", " height='20'/>",
                                              "<br>*wildebeest*"),
                      zebraburchells = paste0("<img src='", silhouettes_path, 
                                              "zebra.png'", " height='20'/>",
                                              "<br>*zebra*"))
```

```{r}
mod_df <- getPlotData(m_nocov, alpha = 0.05, trans = trans)
```

```{r, fig.width=8, fig.height=6}
#| code-fold: true
mod_df2 <- mod_df |> 
  rename("time" = "x",
         "excitefunc" = "value",
         "to" = "response",
         "from" = "variable") |> 
  mutate(from = as.character(from),
         to = as.character(to))

plot_interactions(mod_df2, 
                  scale = "hours",
                  silhouettes = silhouettes_labs,
                  baseline = yintercept,
                  timestep = 12,
                  textsize = 11, 
                  confint = c("cf.lower", "cf.upper"),
                  alpha_conf = alpha_conf,
                  line_geom = "line")

# Export plot
ggsave(file.path(figures_path, "inference_ppstat_nocov.jpeg"),
       bg = "white",
       width = 8, height = 6,
       dpi = 600,
       device = grDevices::jpeg)
```

```{r get_ppstat_coeffs_nocov, echo = FALSE}
# Get species count
nspp <- length(m_nocov@models)

coef_nocov <- data.frame()
for(term in 1:nspp){
  coeffs <- get_ppstat_coeffs(model = m_nocov, 
                              term = term, 
                              alpha = alpha)
  
  coef_nocov <- bind_rows(coef_nocov, coeffs)
}

# If trans is not null, transform all coeffs
if(!is.null(trans)){
  coef_nocov[, c("coef", "lower", "upper")] <- do.call(trans, 
                                                        list(coef_nocov[,
                                                         c("coef", "lower", "upper")]))
}
```

```{r}
#| code-fold: true

# Get all coefficients modelling spontaneous rate
pattern = "(Intercept)"
coef_spont <- coef_nocov[grep(pattern = pattern, 
                              x = coef_nocov$coef_id),]
```

```{r}
#| code-fold: true
coef_spont2 <- coef_spont |> 
  rename("spont" = "coef",
         "to" = "species") |> 
  mutate(to = as.character(to))

plot_background_rate(coef_spont2,
                     silhouettes = silhouettes_labs,
                     confint = c("lower", "upper"))

# Export plot
ggsave(file.path(figures_path, "background_rates_nocov.jpeg"),
       bg = "white",
       width =  6, height = 4,
       dpi = 600,
       device = grDevices::jpeg)
```

### Model with covariates

```{r}
mod_df_cov <- getPlotData(m_cov, alpha = 0.05, trans = trans)
```

```{r, fig.height=6, fig.width=8}
#| code-fold: true

mod_df_cov2 <- mod_df_cov |> 
  rename("time" = "x",
         "excitefunc" = "value",
         "to" = "response",
         "from" = "variable") |> 
  mutate(from = as.character(from),
         to = as.character(to))

plot_interactions(mod_df_cov2, 
                  scale = "hours",
                  silhouettes = silhouettes_labs,
                  baseline = yintercept,
                  timestep = 12,
                  textsize = 11, 
                  confint = c("cf.lower", "cf.upper"),
                  alpha_conf = alpha_conf,
                  line_geom = "line")

# Export plot
ggsave(file.path(figures_path, "inference_ppstat_cov.jpeg"),
       bg = "white",
       width = 8, height = 6,
       dpi = 600,
       device = grDevices::jpeg)
```

Compute the spline transformation of the circular time.

```{r hour_model, echo = FALSE}
# Construct a time vector for which to predict values
step_th <- 0.02
phour <- seq(0, 2*pi, by = step_th)

# We can convert this to the hours of the days from radians
hour <- phour/(2*pi)*24

# Construct spline basis functions matrix evaluated along time vector
bhr <- bSpline(x = phour,
             knots = seq(startknot_hour, 
                         endknot_hour, 
                         by = by_hour),
             ord = ord_hour,
             sym = TRUE)

# Normalising splines basis
cs <- sqrt(apply(bhr^2, 2, sum)*by_hour)
bhr <- sweep(bhr, 2, cs, "/")
```


```{r get_ppstat_coeffs_cov, echo = FALSE}
# Get species count
nspp <- length(m_cov@models)

coef_cov <- data.frame()
for(term in 1:nspp){
  coeffs <- get_ppstat_coeffs(model = m_cov, 
                              term = term, 
                              alpha = alpha)
  
  coef_cov <- bind_rows(coef_cov, coeffs)
}

# If trans is not null, transform all coeffs
if(!is.null(trans)){
  coef_cov[, c("coef", "lower", "upper")] <- do.call(trans, 
                                                        list(coef_cov[,
                                                         c("coef", "lower", "upper")]))
}
```

```{r get_inferred_coeffs, echo = FALSE}
# Get pattern to match 
pattern <- 'bSpline\\(x = hour'

# Get all coefficients modelling circadian rhythm
coef_hour <- coef_cov[grep(pattern = pattern, 
                           x = coef_cov$coef_id),]
coef_spont <- coef_cov[grep(pattern = "(Intercept)", 
                            x = coef_cov$coef_id),]

species_list <- sort(as.character(unique(coef_hour$species)))

# Initialise empty dataframe to fill with different spp
df_hour <- data.frame()

for(i in 1:length(species_list)){
  sp <- species_list[i]
  
  sub_coef <- coef_hour |> filter(species == sp)
  
  # Add the intercept first
  sub_coef <- rbind(coef_spont[coef_spont$species == sp, ],
                    sub_coef)
  
  vec1 <- rep(1, nrow(bhr))
  bhr1 <- cbind(vec1, bhr)
  estimate <- bhr1 %*% sub_coef$coef
  lower <- bhr1 %*% sub_coef$lower
  upper <- bhr1 %*% sub_coef$upper
  
  species <- rep(sp, length(estimate))
  
  # Get predicted values for species i
  df <- data.frame(species,
                   hour,
                   estimate,
                   lower,
                   upper)
  
  # Bind all species values
  df_hour <- bind_rows(df_hour, df)
}
```

```{r, include=FALSE}
#| code-fold: true
coef_spont2 <- coef_spont |> 
  rename("spont" = "coef",
         "to" = "species") |> 
  mutate(to = as.character(to))

plot_background_rate(coef_spont2,
                     silhouettes = silhouettes_labs,
                     confint = c("lower", "upper"))
```

```{r}
#| code-fold: true
silhouettes_title <- c(impala = paste0("Impala <img src='", 
                                       silhouettes_path, 
                                       "impala.png'", " height='15'/>"),
                      kudu = paste0("Kudu <img src='", silhouettes_path, 
                                    "kudu.png'", " height='15'/>"),
                      lion = paste0("Lion <img src='", silhouettes_path, 
                                    "lion.png'", " height='15'/>"),
                      wildebeestblue = paste0("Wildebeest <img src='",
                                              silhouettes_path, 
                                              "wildebeest.png'",
                                              " height='15'/>"),
                      zebraburchells = paste0("Zebra <img src='", 
                                              silhouettes_path, 
                                              "zebra.png'", 
                                              " height='15'/>"))
```

```{r plot_circadian}
#| code-fold: true
glist <- list()

textsize <- 11

for(s in species_list){
  res_filtered <- df_hour |> filter(species == s)
  
  g <- ggplot(res_filtered) + 
    geom_ribbon(aes(x = hour, ymin = lower, 
                    ymax = upper),
                fill = "cornflowerblue", 
                alpha = alpha_conf) +
    geom_line(aes(x = hour, y = estimate)) +
    scale_x_continuous(limits = c(0, 24),
                       breaks = seq(0, 24, by = 4)) +
    theme_linedraw() +
    xlab("Time of the day") +
    ggtitle(silhouettes_title[[s]]) 
  
  # Common theme for text size
  g <- g +
    theme(axis.text.x = element_text(size = textsize),
          plot.title = element_markdown(color = "black", 
                                        size = textsize*1.4),
          axis.title = element_text(size = textsize*1.2))
  
  if (s != species_list[[1]]) { # Remove y axis for all plots except first one
    g <- g + 
      theme(axis.title.y = element_blank(), 
            axis.text.y = element_blank(),
            axis.ticks.y = element_blank())
  } else { # Keep y axis for first plot
    g <- g + 
      ylab("Background rate")
  }

  glist <- c(glist, list(g))
}
```


```{r print_plot, fig.width=12, fig.height=3}
#| code-fold: true
wrap_plots(glist, ncol = 5) & ylim(c(0, 2))

# Export plot
ggsave(file.path(figures_path, "background_rates_cov.jpeg"),
       bg = "white",
       width = 10, height = 3,
       dpi = 600,
       device = grDevices::jpeg)
```
