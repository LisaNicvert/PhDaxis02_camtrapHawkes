---
title: "Simulate and infer interactions with ppstat"
author: 
  name: "Lisa Nicvert"
  orcid: 0009-0006-5763-0865
date: today
format: 
  html:
    toc: true
    toc-depth: 3
embed-resources: true
editor: source
---

## Load libraries

```{r}
#| code-fold: true
#| message: false
library(ppstat)
library(here)
library(lubridate)
library(dplyr)

library(tidygraph)
library(igraph)

library(patchwork)
library(ggtext)

library(camtrapHawkes)
```

## Parameters

```{r}
set.seed(42)

# Network params ------
t <- 0.5 # half life for the exponential interaction function
strength <- log(5) # Max strength of the interaction function
stepfunc <- 0.01

duration_days <- 2 # interaction function support (A in ppstat framework)
spont <- log(0.5) # Background rate

nspecies <- 5

simul_duration <- 10

# --- Colors
# Color palette
cols <- RColorBrewer::brewer.pal(nspecies, "Dark2")

# Name palette
spp_names <- paste0("s", 1:nspecies)
names(cols) <- spp_names

# --- Figures
figures_path <- here("figures/08_ppstat")
```

## Create model

```{r}
# Times vector
times <- seq(0, duration_days, by = stepfunc)
```

### Plot interaction function

```{r}
fs <- create_funcshape("exp", times = times, 
                       strength = strength, t = t)
  
dat <- data.frame(t = times,
                  f = exp(fs))

ggplot(dat) + geom_line(aes(x = t, y = f)) +
  xlab("Delay between j and i (days)") +
  ylab(expression(paste("Intensity (", day^{-1}, ")"))) +
  theme_linedraw() +
  theme(axis.title = element_text(size = 11),
        axis.title.y = element_blank(),
        axis.text = element_text(size = 10))

# Export plot
ggsave(file.path(figures_path, "function.jpeg"),
       width = 8, height = 6, dpi = 600, units = "cm", bg = "white")
```

### Plot interaction network

```{r}
# ppstat doc:
# The list h is a list of lists with h[[m]][[k]] a vector containing the effect of the k'th process on the m'th process.

# Create empty interactions
interac <- create_interactions_ppstat(spp_names = spp_names, 
                                      times = times)

# Fill non zero interactions
interac[["s2"]][["s1"]] <- fs
interac[["s3"]][["s2"]] <- fs
interac[["s4"]][["s2"]] <- fs
```

```{r}
# Transform data to graph
mat <- matrix(nrow = nspecies, ncol = nspecies)
colnames(mat) <- spp_names
rownames(mat) <- spp_names

for(j in 1:length(interac)) {
  weight <- sapply(interac[[j]], sum)
  
  mat[, j] <- weight
}

g <- igraph::graph.adjacency(mat, weighted = TRUE, 
                             mode = "directed")

g <- as_tbl_graph(g) %>% 
  activate(nodes) |> 
  rename("names" = "name")

lay <- layout_as_tree(g)
plot_graph(g,
           colnodes = cols,
           coltext = "white",
           layout = lay,
           textsize = 6, 
           s = 12)

# Export plot
ggsave(file.path(figures_path, "graph.jpeg"),
       width = 8, height = 6, dpi = 600, units = "cm", bg = "white")
```

## Simulate data under model

```{r}
lbd <- hawkesRate(h = interac,
                  Delta = times[2] - times[1],
                  beta0 = rep(spont, nspecies),
                  A = duration_days,
                  phi = exp)
```

```{r}
Ti <- Ogata(tLim = simul_duration, n = 10000, lambda = lbd)
```

```{r}
# Format simulated data
Tdf <- as.data.frame(Ti)
Tdf <- Tdf |> 
  rename("species" = "markType",
         "stamp" = "time") |> 
  mutate(species = gsub(species, 
                        pattern = "^M",replacement = "s")) |> 
  mutate(species = factor(species, levels = spp_names)) |> 
  arrange(species)
```

### Plot simulated data and intensities

```{r}
Tdf |> 
  group_by(species) |> 
  summarize(n = n())
```

```{r}
finter <- unlist(interac)

to <- rep(spp_names, each = length(times)*nspecies)
from <- rep(rep(spp_names, each = length(times)), 
            nspecies)

spontcol <- rep(rep(spont, nspecies), length(times)*nspecies)

model_df <- data.frame(excitefunc = finter,
                       time = rep(times, nspecies^2),
                       spont = spontcol,
                       from = factor(from),
                       to = factor(to))
```

```{r}
lambda_rate1 <- compute_rate(model = model_df, 
                             data = Tdf, timestep = stepfunc/2)
```

```{r}
lambda_rate <- lambda_rate1 |> 
  mutate(lambda_exp = exp(lambda))

lambda_rate <- lambda_rate |> 
  rename("lambda_notrans" = "lambda") |> 
  rename("lambda" = "lambda_exp")
```

```{r, fig.width=10, fig.height=13}
plot_observed_rate(lambda_rate, data = Tdf, 
                   timestep = 1,
                   textsize = 10,
                   t1 = 0,
                   t2 = 10,
                   hlambda = 5,
                   hpoints = 2,
                   ptsize = 1, # 1.3,
                   minor_spacing = 0,
                   major_spacing = 1,
                   max_lambda = 250,
                   lwd = .5,
                   ybreaks = seq(0, 250, by = 100),
                   cols = cols)

# Export plot
ggsave(file.path(figures_path, "realization.jpeg"),
       width = 10, height = 13, dpi = 600, units = "cm", bg = "white")
```